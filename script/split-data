#!/usr/bin/env ruby

require "csv"
require "fileutils"
require "json"

WHOLE_COUNTRY = "(whole country)"
USA = "United States"

def main
  data_dir = File.expand_path("../data", File.dirname(__FILE__))
  out_dir = File.expand_path("../public/data", File.dirname(__FILE__))
  system "rm", "-rf", out_dir
  system "mkdir", "-p", out_dir
  pop = Populations.new(indir: data_dir)
  out = Outputs.new(dir: out_dir, pop: pop)
  split_us(indir: data_dir, out: out)
  split_world(indir: data_dir, out: out)
  out.write
end

class Outputs
  def initialize(dir:, pop:)
    @dir = dir
    @pop = pop
    @countries = Hash.new { |h,k| h[k] = Locality.new(k) }
  end

  def update(country:, province: nil, county: nil, date:, cases:, deaths: nil, province_fips: nil, county_fips: nil)
    @countries[country].update(date: date, cases: cases, deaths: deaths, children: [[province, province_fips], [county, county_fips]])
  end

  def write
    _write_locations
    _write_cases
  end

  def _write_locations
    _write_json ["locations"],
      _localities(@countries, :countries, :provinces, :counties)
  end

  def _write_cases
    @countries.each do |_, country|
      _write_json ["cases", country.name],
        name: country.name,
        fips: country.fips,
        population: @pop.get(country),
        cases: _counts(country.cases_by_date)

      next if country.children.keys == [WHOLE_COUNTRY]

      country.children.each do |_, province|
        _write_json ["cases", country.name, province.name],
          name: "#{province.name}, #{country.name}",
          fips: province.fips,
          population: @pop.get(country, province),
          cases: _counts(province.cases_by_date)

        province.children.each do |_, county|
          _write_json ["cases", country.name, province.name, county.name],
            name: "#{county.name}, #{province.name}, #{country.name}",
            fips: county.fips,
            population: @pop.get(country, province, county),
            cases: _counts(county.cases_by_date)
        end
      end
    end
  end

  def _counts(cases_by_date)
    cases_by_date.sort_by(&:first).map { |date, count| [date.to_s, count] }
  end

  def _localities(localities, key, *other_keys)
    return {} if localities.nil? || localities.empty? || localities.keys == [WHOLE_COUNTRY]
    { key => localities.sort_by(&:first).map { |_, l| _locality(l, *other_keys) } }
  end

  def _locality(locality, *other_keys)
    children = other_keys.empty? ? {} : _localities(locality.children, *other_keys)
    { name: locality.name }.merge(children)
  end

  def _write_json(file, data)
    path = File.join(@dir, *file) + ".json"
    FileUtils.mkdir_p(File.dirname(path))
    File.write(path, JSON.dump(data))
  rescue
    p file
    raise
  end
end

class Populations
  def initialize(indir:)
    @indir = indir
  end

  def get(country, province = nil, county = nil)
    if country.name == USA
      get_us(province, county)
    elsif province.nil? || province.name == WHOLE_COUNTRY
      get_world(country)
    else
      nil
    end
  end

  # https://en.wikipedia.org/wiki/List_of_counties_in_New_York
  NYC = [
    "36061", # New York County
    "36047", # Kings County
    "36005", # Bronx County
    "36081", # Richmond County
    "36085", # Queens County
  ]

  def get_us(state, county)
    @uspop = 0
    @fipspops ||= _read_csv("pop_est_2019.csv").each_with_object(Hash.new(0)) { |row, res|
      pop = row["population"].to_i
      res[row["fips"]] = pop
      res[row["fips"][0,2]] += pop
      @uspop += pop
    }
    if county
      if county.name == "Unknown"
        0
      elsif state.fips == "36" && county.name == "New York City"
        NYC.map { |f| @fipspops.fetch(f) }.inject(&:+)
      else
        @fipspops.fetch(county.fips) {
          w "WARNING: No population data for #{state.name} (#{state.fips}) / #{county.name} (#{county.fips})"
          0
        }
      end
    elsif state
      @fipspops.fetch(state.fips) {
          w "WARNING: No population data for #{state.name} (#{state.fips})"
          0
      }
    else
      @uspop
    end
  end

  def get_world(country)
    return 23_780_000 if country.name == "Taiwan*"
    return 95_540_000 if country.name == "Vietnam"

    @worldpop ||= _read_csv("WPP2019_TotalPopulationBySex.csv").each_with_object({}) { |row, res|
      if row["VarID"] == "2"
        res[row["Location"]] = (row["PopTotal"].to_f * 1000).to_i
      end
    }

    name = COUNTRY_NAMES.fetch(country.name, country.name)

    @worldpop.fetch(name) {
      w "WARNING: No population data for #{country.name} (aka #{name})"
      @worldpop[name] = 0
    }
  end

  COUNTRY_NAMES = {
    "Bolivia" => "Bolivia (Plurinational State of)",
    "Brunei" => "Brunei Darussalam",
    "Burma" => "Myanmar",
    "Congro (Brazzaville)" => "Congo",
    "Congro (Kinshasa)" => "Congo",
    "Cote d'Ivoire" => "CÃ´te d'Ivoire",
    "Iran" => "Iran (Islamic Republic of)",
    "Korea, South" => "Republic of Korea",
    "Moldova" => "Republic of Moldova",
    "Russia" => "Russian Federation",
    "Syria" => "Syrian Arab Republic",
    "Tanzania" => "United Republic of Tanzania",
    "Venezuela" => "Venezuela (Bolivarian Republic of)",
  }

  def _read_csv(file)
    path = File.join(@indir, file)
    puts path
    CSV.read(path, headers: true, encoding: "utf-8")
  end
end

class Locality
  def initialize(name)
    @name = name
    @children = Hash.new { |h,k| h[k] = Locality.new(k) }
    @cases_by_date = Hash.new(0)
    @deaths_by_date = Hash.new(0)
  end

  attr_reader :name, :fips, :children
  attr_reader :cases_by_date, :deaths_by_date

  def update(date:, cases:, deaths:, children:, fips: nil)
    @fips = fips || @fips
    @cases_by_date[date] += cases
    @deaths_by_date[date] += deaths if deaths
    child, *rest = children
    name, fips = child
    if name
      @children[name].update(date: date, cases: cases, deaths: deaths, children: rest, fips: fips)
    end
  end
end

def split_us(indir:, out:)
  read_csv("us-counties.csv", dir: indir, row_type: USCountiesRow, out: out)
end

class USCountiesRow
  def initialize(row)
    @date = row["date"]
    @county = row["county"]
    @state = row["state"]
    @fips = row["fips"]
    @cases = row["cases"].to_i
    @deaths = row["deaths"].to_i
  end

  def update(out)
    out.update \
      date: @date,
      country: USA,
      province: @state,
      province_fips: @fips && @fips[0,2],
      county: @county,
      county_fips: @fips,
      cases: @cases,
      deaths: @deaths
  end
end

def split_world(indir:, out:)
  read_csv("time_series_covid19_confirmed_global.csv", dir: indir, row_type: WorldRow, out: out, progress: 30)
end

class WorldRow
  def initialize(row)
    @row = row
  end

  def update(out)
    country = @row["Country/Region"]
    province = @row["Province/State"]
    return if country == "US"
    @row.headers[4..].each do |date|
      out.update \
        date: Dates.parse(date),
        country: country,
        province: province || WHOLE_COUNTRY,
        cases: @row[date].to_i
    end
  end
end

class MemoDateParser
  def initialize
    @parsed = {}
  end

  def parse(str)
    @parsed[str] ||= _parse(str)
  end

  def _parse(str)
    m,d,y = str.split("/").map(&:to_i)
    Date.new(2000 + y, m, d)
  end
end

Dates = MemoDateParser.new

def read_csv(file, dir:, row_type:, out:, progress: 10000)
  path = File.join(dir, file)
  print path
  print " "
  n = progress
  CSV.foreach(path, headers: true, encoding: "utf-8") do |row|
    n -= 1
    if n == 0
      return if ENV["SAMPLE"] # useful for debugging later parts of this script.
      print "."
      n = progress
    end
    row_type.new(row).update(out)
  end
  print "\n"
end

def w(msg)
  puts msg unless ENV["QUIET"]
end

main
